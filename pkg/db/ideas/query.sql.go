// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package ideas

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIdea = `-- name: CreateIdea :one
INSERT INTO "ideas" (title, body, created_at)
VALUES ($1, $2, now())
RETURNING id, created_at
`

type CreateIdeaParams struct {
	Title pgtype.Text `json:"title"`
	Body  pgtype.Text `json:"body"`
}

type CreateIdeaRow struct {
	ID        int64            `json:"id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateIdea(ctx context.Context, arg CreateIdeaParams) (CreateIdeaRow, error) {
	row := q.db.QueryRow(ctx, createIdea, arg.Title, arg.Body)
	var i CreateIdeaRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const doneIdea = `-- name: DoneIdea :one
UPDATE "ideas" SET done_at = now() WHERE id = $1 AND done_at IS NULL
RETURNING done_at
`

func (q *Queries) DoneIdea(ctx context.Context, id int64) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, doneIdea, id)
	var done_at pgtype.Timestamp
	err := row.Scan(&done_at)
	return done_at, err
}

const listIdeas = `-- name: ListIdeas :many
SELECT id, title, body, created_at, done_at FROM ideas ORDER BY created_at DESC
`

func (q *Queries) ListIdeas(ctx context.Context) ([]Ideas, error) {
	rows, err := q.db.Query(ctx, listIdeas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ideas
	for rows.Next() {
		var i Ideas
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.CreatedAt,
			&i.DoneAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
